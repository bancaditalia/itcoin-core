#!/usr/bin/env python3
# Copyright (c) 2020 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

import argparse
import json
# ITCOIN_SPECIFIC logging is imported using "import as"
import logging as logging_the_lib
import math
import os
import re
import struct
import sys
import time
import subprocess

from typing import Tuple # ITCOIN_SPECIFIC
PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))
PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, "..", "..", "test", "functional"))

# ITCOIN_SPECIFIC - START

# original code left as comment
# sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)

if (PATH_BASE_TEST_FUNCTIONAL not in sys.path):
    sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)

from test_framework.conftest import ITCOIN_PBFT_ROOT_DIR
from test_framework.test_node import TestNodeCLI
# ITCOIN_SPECIFIC - END

from test_framework.blocktools import get_witness_script, script_BIP34_coinbase_height # noqa: E402
from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_binary, from_hex, ser_string, ser_uint256, tx_from_hex # noqa: E402
from test_framework.psbt import PSBT, PSBTMap, PSBT_GLOBAL_UNSIGNED_TX, PSBT_IN_FINAL_SCRIPTSIG, PSBT_IN_FINAL_SCRIPTWITNESS, PSBT_IN_NON_WITNESS_UTXO, PSBT_IN_SIGHASH_TYPE # noqa: E402
from test_framework.script import CScriptOp # noqa: E402

# ITCOIN_SPECIFIC - START
#
# bitcoin's contrib/signet/miner does not use a dedicated logger, and instead
# directly calls logging.{debug,info,warning,error}. By default, the logging
# module writes to stderr. This is ok as long as the miner is called via command
# line.
# However, in itcoin the miner is also loaded as a module by the functional test
# framework. In that case we cannot afford to write to stderr, because the test
# framework considers a failure any output to stderr.
#
# This section configures a proper logger for the miner module, but
# monkey-patches the "logging" name, assigning it to the logger. In this way we
# can keep the source code as close as possible to upstream, without breaking
# the tests.
#
# If a proper logging was upstreamed in bitcoin, this patch could be reverted.
logger = logging_the_lib.getLogger("miner")
logger.setLevel(logging_the_lib.DEBUG)
logger.propagate = False
logger_formatter = logging_the_lib.Formatter('%(asctime)s %(levelname)s %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
stdout_handler = logging_the_lib.StreamHandler(sys.stdout)
stdout_handler.setLevel(logging_the_lib.INFO)
stdout_handler.setFormatter(logger_formatter)
logger.addHandler(stdout_handler)

# monkey patch: trick the rest of the source code to use a customized logger,
# while thinking it is continuingto use the library's one.
#
# The "type: ignore" annotation here is necessary, because we are really
# assigning something of type Logger to a name that was originally of Module
logging = logger # type: ignore
# ITCOIN_SPECIFIC - END

SIGNET_HEADER = b"\xec\xc7\xda\xa2"
PSBT_SIGNET_BLOCK = b"\xfc\x06signetb"    # proprietary PSBT global field holding the block being signed
RE_MULTIMINER = re.compile("^(\d+)(-(\d+))?/(\d+)$")

def create_coinbase(height, value, spk):
    cb = CTransaction()
    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]
    cb.vout = [CTxOut(value, spk)]
    return cb

def signet_txs(block, challenge):
    # assumes signet solution has not been added yet so does not need
    # to be removed

    # ITCOIN_SPECIFIC - START
    # assumes SIGNET_HEADER has already been added so does not need to be added here

    # In itcoin, the transaction is first pow-ed and then signed
    # the signature covers the whole block header, including the pow part, namely nBits and nNonce
    block_header: CBlockHeader = CBlockHeader(block)
    sd = block_header.serialize()
    # ITCOIN_SPECIFIC - END

    to_spend = CTransaction()
    to_spend.nVersion = 0
    to_spend.nLockTime = 0
    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b"\x00" + CScriptOp.encode_op_pushdata(sd), 0)]
    to_spend.vout = [CTxOut(0, challenge)]
    to_spend.rehash()

    spend = CTransaction()
    spend.nVersion = 0
    spend.nLockTime = 0
    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b"", 0)]
    spend.vout = [CTxOut(0, b"\x6a")]

    return spend, to_spend

def do_createpsbt(block, signme, spendme):
    psbt = PSBT()
    psbt.g = PSBTMap( {PSBT_GLOBAL_UNSIGNED_TX: signme.serialize(),
                       PSBT_SIGNET_BLOCK: block.serialize()
                     } )
    psbt.i = [ PSBTMap( {PSBT_IN_NON_WITNESS_UTXO: spendme.serialize(),
                         PSBT_IN_SIGHASH_TYPE: bytes([1,0,0,0])})
             ]
    psbt.o = [ PSBTMap() ]
    return psbt.to_base64()

def do_decode_psbt(b64psbt):
    psbt = PSBT.from_base64(b64psbt)

    assert len(psbt.tx.vin) == 1
    assert len(psbt.tx.vout) == 1
    assert PSBT_SIGNET_BLOCK in psbt.g.map

    scriptSig = psbt.i[0].map.get(PSBT_IN_FINAL_SCRIPTSIG, b"")
    scriptWitness = psbt.i[0].map.get(PSBT_IN_FINAL_SCRIPTWITNESS, b"\x00")

    return from_binary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness

def finish_block(block, signet_solution, grind_cmd):
    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)
    block.vtx[0].rehash()
    block.hashMerkleRoot = block.calc_merkle_root()
    if grind_cmd is None:
        block.solve()
    else:
        headhex = CBlockHeader.serialize(block).hex()
        cmd = grind_cmd.split(" ") + [headhex]
        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b"", check=True).stdout.strip()
        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))
        block.nNonce = newhead.nNonce
        block.rehash()
    return block

def generate_psbt(tmpl, reward_spk, *, blocktime=None):
    signet_spk = tmpl["signet_challenge"]
    signet_spk_bin = bytes.fromhex(signet_spk)

    cbtx = create_coinbase(height=tmpl["height"], value=tmpl["coinbasevalue"], spk=reward_spk)
    cbtx.vin[0].nSequence = 2**32-2
    cbtx.rehash()

    block = CBlock()
    block.nVersion = tmpl["version"]
    block.hashPrevBlock = int(tmpl["previousblockhash"], 16)
    block.nTime = tmpl["curtime"] if blocktime is None else blocktime
    if block.nTime < tmpl["mintime"]:
        block.nTime = tmpl["mintime"]
    block.nBits = int(tmpl["bits"], 16)
    block.nNonce = 0
    block.vtx = [cbtx] + [tx_from_hex(t["data"]) for t in tmpl["transactions"]]

    witnonce = 0
    witroot = block.calc_witness_merkle_root()
    cbwit = CTxInWitness()
    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]
    block.vtx[0].wit.vtxinwit = [cbwit]
    block.vtx[0].vout.append(CTxOut(0, bytes(get_witness_script(witroot, witnonce))))

    signme, spendme = signet_txs(block, signet_spk_bin)

    return do_createpsbt(block, signme, spendme)

def get_reward_address(args, height):
    if args.address is not None:
        return args.address

    if '*' not in args.descriptor:
        addr = args.bcli("deriveaddresses", args.descriptor)[0]  # ITCOIN_SPECIFIC: the call to args.bcli() was originally enclosed in a json.loads()
        args.address = addr
        return addr

    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]
    for k in remove:
        del args.derived_addresses[k]

    addr = args.derived_addresses.get(height, None)
    if addr is None:
        addrs = args.bcli("deriveaddresses", args.descriptor, "[%d,%d]" % (height, height+20))  # ITCOIN_SPECIFIC: the call to args.bcli() was originally enclosed in a json.loads()
        addr = addrs[0]
        for k, a in enumerate(addrs):
            args.derived_addresses[height+k] = a

    return addr

def get_reward_addr_spk(args, height):
    assert args.address is not None or args.descriptor is not None

    if hasattr(args, "reward_spk"):
        return args.address, args.reward_spk

    reward_addr = get_reward_address(args, height)
    reward_spk = bytes.fromhex(args.bcli("getaddressinfo", reward_addr)["scriptPubKey"])  # ITCOIN_SPECIFIC: the call to args.bcli() was originally enclosed in a json.loads()
    if args.address is not None:
        # will always be the same, so cache
        args.reward_spk = reward_spk

    return reward_addr, reward_spk

def do_genpsbt(args):
    tmpl = json.load(sys.stdin)
    _, reward_spk = get_reward_addr_spk(args, tmpl["height"])
    psbt = generate_psbt(tmpl, reward_spk)
    print(psbt)

def do_solvepsbt(args):
    block, signet_solution = do_decode_psbt(sys.stdin.read())
    block = finish_block(block, signet_solution, args.grind_cmd)
    print(block.serialize().hex())

def nbits_to_target(nbits):
    shift = (nbits >> 24) & 0xff
    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))

def target_to_nbits(target):
    tstr = "{0:x}".format(target)
    if len(tstr) < 6:
        tstr = ("000000"+tstr)[-6:]
    if len(tstr) % 2 != 0:
        tstr = "0" + tstr
    if int(tstr[0],16) >= 0x8:
        # avoid "negative"
        tstr = "00" + tstr
    fix = int(tstr[:6], 16)
    sz = len(tstr)//2
    if tstr[6:] != "0"*(sz*2-6):
        fix += 1

    return int("%02x%06x" % (sz,fix), 16)

def seconds_to_hms(s):
    if s == 0:
        return "0s"
    neg = (s < 0)
    if neg:
        s = -s
    out = ""
    if s % 60 > 0:
        out = "%ds" % (s % 60)
    s //= 60
    if s % 60 > 0:
        out = "%dm%s" % (s % 60, out)
    s //= 60
    if s > 0:
        out = "%dh%s" % (s, out)
    if neg:
        out = "-" + out
    return out

def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):
    # strategy:
    #  1) work out how far off our desired target we are
    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period
    #  3) use that to work out the desired average interval in this retarget period
    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by
    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes

    # ITCOIN_SPECIFIC: in upstream Bitcoin, INTERVAL is 10 minutes
    INTERVAL = 60.0*2016/2015 # 1 minute, adjusted for the off-by-one bug

    current_target = nbits_to_target(last_nbits)
    retarget_factor = ultimate_target / current_target
    retarget_factor = max(0.25, min(retarget_factor, 4.0))

    avg_interval = INTERVAL * retarget_factor

    if do_poisson:
        det_rand = int(last_hash[-8:], 16) * 2**-32
        this_interval_variance = -math.log1p(-det_rand)
    else:
        this_interval_variance = 1

    this_interval = avg_interval * this_interval_variance
    this_interval = max(1, min(this_interval, 3600))

    return this_interval

def next_block_is_mine(last_hash, my_blocks):
    det_rand = int(last_hash[-16:-8], 16)
    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]

# ITCOIN_SPECIFIC - START
#
# new methods for solution independent blockchain miner
class DoGenerateArgs:
    # Util class for passing arguments to signet miner do_generate
    pass

def do_generate_next_block(args, blocktime=None) -> Tuple[CBlock, dict, str]:
    # Check input parameters
    grind_cmd = args.grind_cmd
    if grind_cmd is None:
        raise

    # bci
    bci = args.bcli("getblockchaininfo")

    # gbt
    tmpl = args.bcli("getblocktemplate", '{"rules":["signet","segwit"]}')
    if tmpl["previousblockhash"] != bci["bestblockhash"]:
        logging.warning("GBT based off unexpected block (%s not %s), retrying", tmpl["previousblockhash"], bci["bestblockhash"])
        raise
    logging.debug("GBT template: %s", tmpl)

    # address for reward
    reward_addr, reward_spk = get_reward_addr_spk(args, tmpl["height"])

    cbtx = create_coinbase(height=tmpl["height"], value=tmpl["coinbasevalue"], spk=reward_spk)
    cbtx.vin[0].nSequence = 2**32-2
    cbtx.rehash()

    block = CBlock()
    block.nVersion = tmpl["version"]
    block.hashPrevBlock = int(tmpl["previousblockhash"], 16)
    block.nTime = tmpl["curtime"] if blocktime is None else blocktime
    if block.nTime < tmpl["mintime"]:
        block.nTime = tmpl["mintime"]
    block.nBits = int(tmpl["bits"], 16)
    block.nNonce = 0
    block.vtx = [cbtx] + [tx_from_hex(t["data"]) for t in tmpl["transactions"]]
    logging.debug(f"Block merkle root (function which includes signatures) after block creation = { ser_uint256(block.calc_merkle_root()).hex() }")

    # Appending the witness commitment
    witnonce = 0
    witroot = block.calc_witness_merkle_root()
    cbwit = CTxInWitness()
    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]
    block.vtx[0].wit.vtxinwit = [cbwit]
    block.vtx[0].vout.append(CTxOut(0, bytes(get_witness_script(witroot, witnonce))))
    block.vtx[0].rehash()
    logging.debug(f"Block merkle root (function which includes signatures) after appending witness commitment = { ser_uint256(block.calc_merkle_root()).hex() }")

    # Appending the SIGNET_HEADER
    # In itcoin this is made here, because the merkle root should include the signet header but not the signet solution
    # In the original signet, the signet header was appendend later, together with the signet solution. The merke root included both.
    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)
    block.vtx[0].rehash()
    logging.debug(f"Block witness commitment after appending signet header = { block.vtx[0].vout[-1].scriptPubKey.hex() }")
    logging.debug(f"Block merkle root (function which includes signatures) after appending signet header = { ser_uint256(block.calc_merkle_root()).hex() }")

    # Transactions updated, recalculate block merkle root
    # Signet solution has not been added, so there is no need to use an itcoin signet specific merkle root calculator
    block.hashMerkleRoot = block.calc_merkle_root()

    # Mine block
    logging.debug(f"Grinding block...")
    headhex = CBlockHeader.serialize(block).hex()
    cmd = grind_cmd.split(" ") + [headhex]
    subp_env = dict(os.environ, LD_LIBRARY_PATH=f'$LD_LIBRARY_PATH:{ITCOIN_PBFT_ROOT_DIR}/usrlocal/lib')
    newheadhex = subprocess.run(cmd, env=subp_env, stdout=subprocess.PIPE, input=b"", check=True).stdout.strip()
    newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))
    block.nNonce = newhead.nNonce
    block.rehash()
    logging.debug(f"Block merkle root (function which includes signatures) after mining = { ser_uint256(block.calc_merkle_root()).hex() }")

    return block, tmpl, reward_addr

def do_sign_block(args, block: CBlock, signet_spk) -> CBlock:
    signet_spk_bin = bytes.fromhex(signet_spk)

    # Creating the signet transactions
    signme, spendme = signet_txs(block, signet_spk_bin)
    logging.debug(f"signme.vin[0] = {signme.vin[0]}")

    # sign block
    psbt = do_createpsbt(block, signme, spendme)
    input_stream = os.linesep.join([psbt, "true", "ALL"])
    psbt_signed = args.bcli("-stdin", "walletprocesspsbt", input=input_stream)
    if not psbt_signed.get("complete",False):
        logging.debug("Generated PSBT: %s" % (psbt,))
        sys.stderr.write("PSBT signing failed")
        raise RuntimeError("PSBT signing failed")

    # The block returned by do_decode_psbt is just a copy of the original block,
    # likely passed to allow PSBT signer to verify the block being signed
    # PSBT_IN_PROPRIETARY = 0xFC
    # PSBT_SIGNET_BLOCK = b"\xfc\x06signetb"
    # https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki
    block_copy, signet_solution = do_decode_psbt(psbt_signed["psbt"])

    # Append the signet solution
    # We remove the last 5 bytes, in order to remove the previously appended SIGNET_HEADER
    # We append SIGNET_HEADER and signet_solution again as a single pushdata operation
    block_copy.vtx[0].vout[-1].scriptPubKey = block_copy.vtx[0].vout[-1].scriptPubKey[:-5] + CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)
    block_copy.vtx[0].rehash()

    logging.debug(f"Signet solution = { signet_solution.hex() }")
    logging.debug(f"Block merkle root (function which includes signatures) after signature = { ser_uint256(block_copy.calc_merkle_root()).hex() }")

    return block_copy


def do_sign_block_partial(args: DoGenerateArgs, block: CBlock, signet_spk: str) -> Tuple[str, bool]:
    """
    Sign a block for the part we can sign for.

    :param args: the TestNode configurations
    :param block: the block
    :param signet_spk: the signet challenge
    :return: the (potentially partially) PSBT, and a boolean that says whether the PSBT is complete or not.
    """
    signet_spk_bin = bytes.fromhex(signet_spk)

    # Creating the signet transactions
    signme, spendme = signet_txs(block, signet_spk_bin)
    logging.debug(f"signme.vin[0] = {signme.vin[0]}")

    psbt = do_createpsbt(block, signme, spendme)

    input_stream = os.linesep.join([psbt, "true", "ALL"])
    partially_signed_psbt = args.bcli("-stdin", "walletprocesspsbt", input=input_stream)
    return partially_signed_psbt["psbt"], partially_signed_psbt["complete"]


def do_finalize_psbt(args: DoGenerateArgs, psbt: str) -> Tuple[str, bool]:
    """
    Finalize the PSBT.

    :param args: the TestNode configuration
    :param psbt: the PSBT to finalize
    :return: the finalized PSBT
    """
    finalized_psbt = args.bcli("finalizepsbt", psbt, False)
    return finalized_psbt["psbt"], finalized_psbt["complete"]


def do_combine_psbt(args: DoGenerateArgs, *psbts: str) -> str:
    """
    Combine multiple PSBTs into one.

    :param args: the TestNode configurations.
    :param psbts: the list of PSBTs.
    :return: the combined PSBT.
    """
    assert len(psbts) > 0, "at least one PSBT is required"
    combined_psbt = args.bcli("combinepsbt", json.dumps(psbts))
    return combined_psbt


def extract_block(args, psbt: str) -> CBlock:
    """
    Extract a block from the (complete) PSBT

    :param args: the TestNode configuration
    :param psbt: the PSBT. It must be a complete PSBT.
    :return: the block
    """
    # check whether the PSBT is final or not.
    analysis = args.bcli("analyzepsbt", psbt)
    if not analysis["inputs"][0].get("is_final", False):
        raise RuntimeError("PSBT is not complete")

    block_copy, signet_solution = do_decode_psbt(psbt)
    if not signet_solution:
        raise ValueError("could not extract the signet solution")

    # Append the signet solution
    # We remove the last 5 bytes, in order to remove the previously appended SIGNET_HEADER
    # We append SIGNET_HEADER and signet_solution again as a single pushdata operation
    block_copy.vtx[0].vout[-1].scriptPubKey = block_copy.vtx[0].vout[-1].scriptPubKey[:-5] + CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)
    block_copy.vtx[0].rehash()

    logging.debug(f"Signet solution = { signet_solution.hex() }")
    logging.debug(f"Block merkle root after signature = { ser_uint256(block_copy.calc_merkle_root()).hex() }")

    return block_copy

def do_propagate_block(args, block: CBlock):
    logging.debug(f"propagating block = {block.serialize().hex()}")
    logging.debug(f"with block_header = {CBlockHeader(block).serialize().hex()}")

    # submit block
    r = args.bcli("-stdin", "submitblock", input=block.serialize().hex())
    return r
# ITCOIN_SPECIFIC - END

def do_generate(args):
    if args.max_blocks is not None:
        if args.ongoing:
            logging.error("Cannot specify both --ongoing and --max-blocks")
            return 1
        if args.max_blocks < 1:
            logging.error("N must be a positive integer")
            return 1
        max_blocks = args.max_blocks
    elif args.ongoing:
        max_blocks = None
    else:
        max_blocks = 1

    if args.set_block_time is not None and max_blocks != 1:
        logging.error("Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time")
        return 1
    if args.set_block_time is not None and args.set_block_time < 0:
        args.set_block_time = time.time()
        logging.info("Treating negative block time as current time (%d)" % (args.set_block_time))

    if args.min_nbits:
        if args.nbits is not None:
            logging.error("Cannot specify --nbits and --min-nbits")
            return 1
        args.nbits = "207fffff"  # ITCOIN_SPECIFIC (changed "1e0377ae" -> "207fffff")
        logging.info("Using nbits=%s" % (args.nbits))

    if args.set_block_time is None:
        if args.nbits is None or len(args.nbits) != 8:
            logging.error("Must specify --nbits (use calibrate command to determine value)")
            return 1

    if args.multiminer is None:
       my_blocks = (0,1,1)
    else:
        if not args.ongoing:
            logging.error("Cannot specify --multiminer without --ongoing")
            return 1
        m = RE_MULTIMINER.match(args.multiminer)
        if m is None:
            logging.error("--multiminer argument must be k/m or j-k/m")
            return 1
        start,_,stop,total = m.groups()
        if stop is None:
            stop = start
        start, stop, total = map(int, (start, stop, total))
        if stop < start or start <= 0 or total < stop or total == 0:
            logging.error("Inconsistent values for --multiminer")
            return 1
        my_blocks = (start-1, stop, total)

    ultimate_target = nbits_to_target(int(args.nbits,16))

    mined_blocks = 0
    bestheader = {"hash": None}
    lastheader = None
    while max_blocks is None or mined_blocks < max_blocks:

        # current status?
        bci = args.bcli("getblockchaininfo")  # ITCOIN_SPECIFIC: the call to args.bcli() was originally enclosed in a json.loads()

        if bestheader["hash"] != bci["bestblockhash"]:
            bestheader = args.bcli("getblockheader", bci["bestblockhash"])  # ITCOIN_SPECIFIC: the call to args.bcli() was originally enclosed in a json.loads()

        if lastheader is None:
            lastheader = bestheader["hash"]
        elif bestheader["hash"] != lastheader:
            next_delta = next_block_delta(int(bestheader["bits"], 16), bestheader["hash"], ultimate_target, args.poisson)
            next_delta += bestheader["time"] - time.time()
            next_is_mine = next_block_is_mine(bestheader["hash"], my_blocks)
            logging.info("Received new block at height %d; next in %s (%s)", bestheader["height"], seconds_to_hms(next_delta), ("mine" if next_is_mine else "backup"))
            lastheader = bestheader["hash"]

        # when is the next block due to be mined?
        now = time.time()
        if args.set_block_time is not None:
            logging.debug("Setting start time to %d", args.set_block_time)
            mine_time = args.set_block_time
            action_time = now
            is_mine = True
        elif bestheader["height"] == 0:
            time_delta = next_block_delta(int(bestheader["bits"], 16), bci["bestblockhash"], ultimate_target, args.poisson)
            time_delta *= 100 # 100 blocks
            logging.info("Backdating time for first block to %d minutes ago" % (time_delta/60))
            mine_time = now - time_delta
            action_time = now
            is_mine = True
        else:
            time_delta = next_block_delta(int(bestheader["bits"], 16), bci["bestblockhash"], ultimate_target, args.poisson)
            mine_time = bestheader["time"] + time_delta

            is_mine = next_block_is_mine(bci["bestblockhash"], my_blocks)

            action_time = mine_time
            if not is_mine:
                action_time += args.backup_delay

            if args.standby_delay > 0:
                action_time += args.standby_delay
            elif mined_blocks == 0:
                # for non-standby, always mine immediately on startup,
                # even if the next block shouldn't be ours
                action_time = now

        # don't want fractional times so round down
        mine_time = int(mine_time)
        action_time = int(action_time)

        # can't mine a block 2h in the future; 1h55m for some safety
        action_time = max(action_time, mine_time - 6900)

        # ready to go? otherwise sleep and check for new block
        if now < action_time:
            sleep_for = min(action_time - now, 60)
            if mine_time < now:
                # someone else might have mined the block,
                # so check frequently, so we don't end up late
                # mining the next block if it's ours
                sleep_for = min(20, sleep_for)
            minestr = "mine" if is_mine else "backup"
            logging.debug("Sleeping for %s, next block due in %s (%s)" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))
            time.sleep(sleep_for)
            continue

        # ITCOIN_SPECIFIC - START
        #
        # generate block using the new methods, leave as comment the other lines to highlight the differences
        # gbt
        # tmpl = json.loads(args.bcli("getblocktemplate", '{"rules":["signet","segwit"]}'))
        block, tmpl, reward_addr = do_generate_next_block(args, blocktime=mine_time)
        if tmpl["previousblockhash"] != bci["bestblockhash"]:
            logging.warning("GBT based off unexpected block (%s not %s), retrying", tmpl["previousblockhash"], bci["bestblockhash"])
            time.sleep(1)
            continue

        logging.debug("GBT template: %s", tmpl)

        if tmpl["mintime"] > mine_time:
            logging.info("Updating block time from %d to %d", mine_time, tmpl["mintime"])
            mine_time = tmpl["mintime"]
            if mine_time > now:
                logging.error("GBT mintime is in the future: %d is %d seconds later than %d", mine_time, (mine_time-now), now)
                return 1

        # address for reward
        # reward_addr, reward_spk = get_reward_addr_spk(args, tmpl["height"])

        # mine block
        logging.debug("Mining block delta=%s start=%s mine=%s", seconds_to_hms(mine_time-bestheader["time"]), mine_time, is_mine)
        mined_blocks += 1
        signed_block = do_sign_block(args, block, tmpl["signet_challenge"])
        # psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)
        # input_stream = os.linesep.join([psbt, "true", "ALL"]).encode('utf8')
        # psbt_signed = json.loads(args.bcli("-stdin", "walletprocesspsbt", input=input_stream))
        # if not psbt_signed.get("complete",False):
        #     logging.debug("Generated PSBT: %s" % (psbt,))
        #     sys.stderr.write("PSBT signing failed\n")
        #     return 1
        # block, signet_solution = do_decode_psbt(psbt_signed["psbt"])
        # block = finish_block(block, signet_solution, args.grind_cmd)

        # submit block
        # r = args.bcli("-stdin", "submitblock", input=block.serialize().hex().encode('utf8'))
        r = do_propagate_block(args, signed_block)
        # ITCOIN_SPECIFIC - END

        # report
        bstr = "block" if is_mine else "backup block"

        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)
        next_delta += block.nTime - time.time()
        next_is_mine = next_block_is_mine(block.hash, my_blocks)

        logging.debug("Block hash %s payout to %s", block.hash, reward_addr)
        logging.info("Mined %s at height %d; next in %s (%s)", bstr, tmpl["height"], seconds_to_hms(next_delta), ("mine" if next_is_mine else "backup"))
        if r != "":
            logging.warning("submitblock returned %s for height %d hash %s", r, tmpl["height"], block.hash)
        lastheader = block.hash

def do_calibrate(args):
    if args.nbits is not None and args.seconds is not None:
        sys.stderr.write("Can only specify one of --nbits or --seconds\n")
        return 1
    if args.nbits is not None and len(args.nbits) != 8:
        sys.stderr.write("Must specify 8 hex digits for --nbits\n")
        return 1

    TRIALS = 600 # gets variance down pretty low
    TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials

    header = CBlockHeader()
    header.nBits = TRIAL_BITS
    targ = nbits_to_target(header.nBits)

    start = time.time()
    count = 0
    for i in range(TRIALS):
        header.nTime = i
        header.nNonce = 0
        headhex = header.serialize().hex()
        cmd = args.grind_cmd.split(" ") + [headhex]
        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b"", check=True).stdout.strip()

    avg = (time.time() - start) * 1.0 / TRIALS

    if args.nbits is not None:
        want_targ = nbits_to_target(int(args.nbits,16))
        want_time = avg*targ/want_targ
    else:
        want_time = args.seconds if args.seconds is not None else 25
        want_targ = int(targ*(avg/want_time))

    print("nbits=%08x for %ds average mining time" % (target_to_nbits(want_targ), want_time))
    return 0

# ITCOIN_SPECIFIC - START
def bitcoin_cli(cli_object: TestNodeCLI, command, *args, **kwargs):
    """A generic bitcoin_cli function

       This function keeps almost unchanged the upstream miner interface,
       while wrapping the TestNodeCLI.send_cli method of the Bitcoin test framework.

       :param cli_object: an instance of TestNodeCLI
       :param command: string, the first argument to be passed to bitcoin-cli command line, e.g. getblockchaininfo for a normal operation or -stdin to invoke
       :param *args: strings, other arguments to be passed to bitcoin-cli command line
       :param **kwargs: named arguments to the bitcoin-cli command line or input="" when used together with -stdin (in this case the input is encoded)

       :return: the result of the bitcoin JSON-RPC command. The result is decoded from json if json.loads on the result string is successful, otherwise a string is returned
    """
    logging.debug("Calling bitcoin-cli: %r %r", command, list(args))

    # Build the command line as result of command and *args
    cmd_line = [command]+list(args)

    # Derive the options for bitcoin-cli.
    # They will be passed to TestNodeCLI method using the __call__(self, *options, input=None) function
    options = []
    for opt in cmd_line:
        if opt.startswith("-"):
            options.append(cmd_line.pop(0))
        else:
            break

    # Get the command for TestNodeCLI send_cli
    cmd_command = cmd_line.pop(0)

    # What is left are the args for TestNodeCLI send_cli
    cmd_args = cmd_line

    # Derive the input for TestNodeCLI method call
    # What is left will be passed as kwargs to the send_cli method
    cmd_input =  kwargs.pop("input", None)

    # Finally use the callable function with options and input
    result = cli_object(*options, input=cmd_input).send_cli(cmd_command, *cmd_args,  **kwargs)

    logging.debug("Result of bitcoin-cli: %r %r", command, result)
    return result
# ITCOIN_SPECIFIC - END

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cli", default="bitcoin-cli", type=str, help="bitcoin-cli command")
    parser.add_argument("--debug", action="store_true", help="Print debugging info")
    parser.add_argument("--quiet", action="store_true", help="Only print warnings/errors")

    cmds = parser.add_subparsers(help="sub-commands")
    genpsbt = cmds.add_parser("genpsbt", help="Generate a block PSBT for signing")
    genpsbt.set_defaults(fn=do_genpsbt)

    solvepsbt = cmds.add_parser("solvepsbt", help="Solve a signed block PSBT")
    solvepsbt.set_defaults(fn=do_solvepsbt)

    generate = cmds.add_parser("generate", help="Mine blocks")
    generate.set_defaults(fn=do_generate)
    generate.add_argument("--ongoing", action="store_true", help="Keep mining blocks")
    generate.add_argument("--max-blocks", default=None, type=int, help="Max blocks to mine (default=1)")
    generate.add_argument("--set-block-time", default=None, type=int, help="Set block time (unix timestamp)")
    generate.add_argument("--nbits", default=None, type=str, help="Target nBits (specify difficulty)")
    generate.add_argument("--min-nbits", action="store_true", help="Target minimum nBits (use min difficulty)")
    generate.add_argument("--poisson", action="store_true", help="Simulate randomised block times")
    generate.add_argument("--multiminer", default=None, type=str, help="Specify which set of blocks to mine (eg: 1-40/100 for the first 40%%, 2/3 for the second 3rd)")
    generate.add_argument("--backup-delay", default=300, type=int, help="Seconds to delay before mining blocks reserved for other miners (default=300)")
    generate.add_argument("--standby-delay", default=0, type=int, help="Seconds to delay before mining blocks (default=0)")

    calibrate = cmds.add_parser("calibrate", help="Calibrate difficulty")
    calibrate.set_defaults(fn=do_calibrate)
    calibrate.add_argument("--nbits", type=str, default=None)
    calibrate.add_argument("--seconds", type=int, default=None)

    for sp in [genpsbt, generate]:
        sp.add_argument("--address", default=None, type=str, help="Address for block reward payment")
        sp.add_argument("--descriptor", default=None, type=str, help="Descriptor for block reward payment")

    for sp in [solvepsbt, generate, calibrate]:
        sp.add_argument("--grind-cmd", default=None, type=str, required=(sp==calibrate), help="Command to grind a block header for proof-of-work")

    args = parser.parse_args(sys.argv[1:])

    # ITCOIN_SPECIFIC - START
    # We keep unchanged the command-line miner interface, but internally we use the TestNodeCLI object
    # via the bitcoin_cli method that calls send_cli
    inner_argv = args.cli.split(" ")
    inner_parser = argparse.ArgumentParser()
    inner_parser.add_argument("-datadir", default="~/.bitcoin", type=str, help="bitcoin datadir")
    inner_parser.add_argument("-conf", default=None, type=str, help="bitcoin conf file", dest='itcoin_conf')
    inner_parser.add_argument("-rpcconnect", default=None, type=str, help="rpc connect host", dest='itcoin_rpcconnect')
    inner_args = inner_parser.parse_args(inner_argv[1:])
    cli : TestNodeCLI = TestNodeCLI(inner_argv[0], inner_args.datadir,
        '-conf='+inner_args.itcoin_conf if inner_args.itcoin_conf is not None else None,
        '-rpcconnect='+inner_args.itcoin_rpcconnect if inner_args.itcoin_rpcconnect is not None else None)
    args.bcli = lambda command=None, *args, **kwargs: bitcoin_cli(cli, command, *args, **kwargs)
    # ITCOIN_SPECIFIC - END

    if hasattr(args, "address") and hasattr(args, "descriptor"):
        if args.address is None and args.descriptor is None:
            sys.stderr.write("Must specify --address or --descriptor\n")
            return 1
        elif args.address is not None and args.descriptor is not None:
            sys.stderr.write("Only specify one of --address or --descriptor\n")
            return 1
        args.derived_addresses = {}

    # ITCOIN_SPECIFIC - START
    if args.debug:
        logger_level = logging_the_lib.DEBUG
    elif args.quiet:
        logger_level = logging_the_lib.WARNING
    else:
        logger_level = logging_the_lib.INFO
    logger.setLevel(logger_level)
    for handler in logger.handlers:
        handler.setLevel(logger_level)
    # ITCOIN_SPECIFIC - END

    if hasattr(args, "fn"):
        return args.fn(args)
    else:
        logging.error("Must specify command")
        return 1

if __name__ == "__main__":
    main()
